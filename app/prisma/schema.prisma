generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum StreamType {
  Youtube
  Spotify
}

enum Provider {
  Google
  Github
}

model User {
  id       String   @id @default(cuid())
  email    String   @unique
  name     String
  provider Provider

  streams     Stream[]
  upvotes     Upvote[]
  joinedRooms RoomParticipant[]

  ownedRoom   Room?   @relation("OwnedRoom")
  ownedRoomId String? @unique
}

model Room {
  id       String @id @default(cuid())
  roomId   String @unique
  roomName String
  ownerId  String @unique @map("ownerId")

  owner        User              @relation("OwnedRoom", fields: [ownerId], references: [id], onDelete: Cascade)
  streams      Stream[]
  participants RoomParticipant[]
}

model RoomParticipant {
  id     String @id @default(cuid())
  userId String
  roomId String

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  room Room @relation(fields: [roomId], references: [id], onDelete: Cascade)

  @@unique([userId, roomId])
}

model Stream {
  id          String     @id @default(cuid())
  roomId      String
  url         String
  extractedId String     @unique
  title       String
  smallImg    String
  bigImg      String
  type        StreamType
  upvotes     Int        @default(0)
  isPlayed    Boolean    @default(false)

  room   Room    @relation(fields: [roomId], references: [id], onDelete: Cascade)
  userId String?
  user   User?   @relation(fields: [userId], references: [id], onDelete: Cascade)

  upvoteList       Upvote[]
  currentlyPlaying CurrentlyPlaying?
}

model Upvote {
  id       String @id @default(cuid())
  userId   String
  streamId String

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  stream Stream @relation(fields: [streamId], references: [id], onDelete: Cascade)

  @@unique([userId, streamId])
}

model CurrentlyPlaying {
  id       String @id @default(cuid())
  streamId String @unique

  stream    Stream   @relation(fields: [streamId], references: [id], onDelete: Cascade)
  startedAt DateTime @default(now())
}

model Played {
  id       String     @id @default(cuid())
  streamId String     @unique
  title    String
  userId   String
  smallImg String
  type     StreamType
}
